<launch>
<arg name="area_bounds" default="[390, 10000]"/>

<arg name="circular_bounds" default="[0.3, 0.99]"/>

<arg name="convexity_bounds" default="[0.7, 1.0]"/>

<arg name= "img_topic" default="/interceptor/depth_camera/depth/image_raw" />
<arg name= "camInfo_topic" default="/interceptor/depth_camera/depth/camera_info" />
<arg name="reference_frame" default="interceptor_odom"/>
<arg name="depth_step" default="2"/>
<arg name="debug" default="False"/>
<arg name="show_debug_images" default="False"/>
<arg name="publish_processed_images" default="True"/>

<node name="drone_detector" type="drone_detector.py" pkg="drone_hunter_perception" output="screen">
    <param name="debug" value="$(arg debug)"/> <!-- Showing debug messages-->
    <param name="img_topic" value="$(arg img_topic)" />
    <param name="camInfo_topic" value="$(arg camInfo_topic)" />
    <param name="show_debug_images" value="$(arg show_debug_images)"/> <!-- Showing debug images-->
    <param name="publish_processed_images" value="$(arg publish_processed_images)"/> <!-- Publish detections image-->
    <param name="reference_frame" value="$(arg reference_frame)"/> <!-- Frame to transform detected targets to-->
    <!--param name="area_bounds" value="[400, 1e4]"/--> <!-- controur area range in pixels -->
    <rosparam param="area_bounds" subst_value="True">$(arg area_bounds)</rosparam>
    <!--param name="circular_bounds" value="[0.3, 0.99]"/--> <!-- Acceptable controur circularity range, \in [0,1] -->
    <rosparam param="circular_bounds" subst_value="True">$(arg circular_bounds)</rosparam>
    <!--param name="convexity_bounds" value="[0.7, 1.0]"/--> <!-- Controur convexity bound, \in [0,1] -->
    <rosparam param="convexity_bounds" subst_value="True">$(arg convexity_bounds)</rosparam>
    <param name="d_group_max" value="50" /> <!-- maximal contour grouping distance in pixels -->
    <param name="min_group_size" value="4" /> <!-- minimal number of contours for a group to be valid -->
    <param name="max_cam_depth" value="20.0" /> <!-- Maximum acceptable camera depth values, in meters-->
    <param name="depth_scale_factor" value="1.0" /> <!-- Scaling factor to make depth values in meters -->
    <param name="depth_step" value="$(arg depth_step)"/>
</node>
</launch>